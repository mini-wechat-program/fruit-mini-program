<style lang="less">
  .menu {
    position: relative;
    width: 100%;
    .menu-scroll {
      white-space:nowrap;
      .menu-item {
        position: relative;
        height: 84rpx;
        line-height: 84rpx;
        position: relative;
        display: inline-block;
        text-align: center;
        color: #333;
        font-size: 30rpx;
        width: 140rpx;
        &.current {
          color: #e02e24;
          &::after {
            content: "";
            position: absolute;
            left: 10%;
            bottom: 0;
            width: 80%;
            height: 4rpx;
            background-color: #e02e24;
          }
        }
        image {
          display: inline-block;
          vertical-align: middle;
          margin-right: 12rpx;
          width: 28rpx;
          height: 28rpx;
        }
      }
    }
    .sub-menus {
      position: relative;
      width: 100%;
      .sub-menu-item {
        position: relative;
        display: inline-block;
        text-align: center;
        color: #58595B;
        font-size: 26rpx;
        width: 20%;
        height: 58rpx;
        padding: 4rpx 0;
        box-sizing: border-box;
        text {
          display: inline-block;
          box-sizing: border-box;
          min-width: 110rpx;
          padding: 0 16rpx;
          height: 50rpx;
          line-height: 50rpx;
          &.current {
            color: #E02E24;
            border-radius: 25rpx;
            background-color: rgba(224, 46, 36, 0.08)
          }
        }
      }
    }
  }
</style>
<template>
  <view class="menu">
    <scroll-view class="menu-scroll" scroll-x>
      <block wx:for-items="{{menus.list}}" wx:for-index="index" wx:for-item="item" wx:key="id">
          <view @tap="onTabMenu({{item.optId}})" class="menu-item {{item.optId === menus.id && 'current'}}">
              <image src="{{item.optId === menus.id ? item.selectedIcon : item.unselectedIcon}}"
                background-size="cover" mode="aspectFit" />
              <text>{{item.optName}}</text>
          </view>
      </block>
    </scroll-view>
    <view wx-if="{{submenus.list.length}}" class="sub-menus">
      <block wx:for-items="{{submenus.list}}" wx:for-index="index" wx:for-item="item" wx:key="id">
          <view @tap="onTabSubmenu({{item.secondaryOptId}})" class="sub-menu-item">
              <text class="{{ item.secondaryOptId === submenus.id ? 'current' : ''}}">{{item.secondaryOptName}}</text>
          </view>
      </block>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import { INCREMENT, DECREMENT } from '@/store/types/counter'
  import { asyncInc } from '@/store/actions'
  import { menuList } from '../../mock/menus'

  @connect({
    stateNum (state) {
      return state.counter.num
    },
    asyncNum (state) {
      return state.counter.asyncNum
    }
  }, {
    incNum: INCREMENT,
    decNum: DECREMENT,
    asyncInc
  })

  export default class Menue extends wepy.component {
    props = {
      num: {
        type: [Number, String],
        coerce: function (v) {
          return +v
        },
        default: 50
      }
    }
    data = {
      menus: {
        id: 0,
        list: menuList
      },
      submenus: {
        id: 0,
        list: []
      }
    }
    events = {
      'index-broadcast': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    watch = {
      num (curVal, oldVal) {
        console.log(`旧值：${oldVal}，新值：${curVal}`)
      }
    }
    computed = {

    }

    methods = {
      onTabMenu (menuID) {
        const menuid = Number(this.menus.id)
        if (menuid === Number(menuID)) {
          return
        }
        const menus = this.menus.list || []
        let submenus = menus.filter((item) => Number(item.optId) === Number(menuID))
        submenus = (submenus || [])[0] || {}
        submenus = submenus.secondaryOpts || []
        this.menus.id = menuID
        this.submenus.id = 0
        this.submenus.list = submenus
        this.$emit('change-menu', menuID)
      },

      onTabSubmenu (submenuID) {
        const menuid = Number(this.submenus.id)
        if (menuid === Number(submenuID)) {
          return
        }
        this.submenus.id = submenuID
        this.$emit('change-submenu', submenuID)
      }
    }
  }
</script>
